var mongoose = require('mongoose');
var User = mongoose.model('User');
var config = require('../../config/config.js');

/**
* authy-client is a Node module wrapping basic Authy functionalities to be used easily in a web app.
* Getting a new client instance by passing the Authy app API_KEY mentioned in the config.js.
* This API_KEY was generated by Authy after publishing a new app with them.
*/
const Client = require('authy-client').Client;
const authy = new Client({
    key: config.API_KEY
});

var controller = {
  getUser: getUser,
  register: register,
  login: login,
  createOneTouchRequest: createOneTouchRequest,
  verifyToken: verifyToken
};

/**
* getting a single user from MongoDB by passing the user email;
*/
function getUser(req, res) {
  User.findOne({email: req.session.username})
      .exec(function(err, user) {
        if(!user){
          err = 'User not found';
        } else {
          res.status(200).json(user);
        }
        if (err) {
            res.status(500).json(err);
        }
      })
}

/**
* Contains registration logic and regitration process for signing up a user with authetication id
*/
function register(req, res) {
    var userDetails = req.body;

    User.findOne({
            email: userDetails.email
        })
        .exec(function(err, user) {
            if (err) {
                res.status(500).json(err);
                return;
            }
            if (user) {
                res.status(409).json({
                    error: 'User already exists'
                });
                return;
            }
            var user = new User();

            user.email = userDetails.email;
            user.encryptPassword(userDetails.password);
            user.save(function(err) {
                if (err) {
                    res.status(500).json({
                        error: 'User not created'
                    });
                } else {
                  // Authy needs full numbrer with country code;
                    authy.registerUser({
                        countryCode: userDetails.countryCode,
                        email: userDetails.email,
                        phone: userDetails.phone
                    }, function (err, registerRes) {
                        if (err) {
                            res.status(500).json(err);
                            return;
                        }
                        user.set('authy_id', registerRes.user.id);
                        user.save(function (err) {
                            if (err) {
                                res.status(500).json(err);
                            } else {
                              // Creating user session with form details.
                                createUserSession(req, res, user);
                            }
                        });
                    });
                }
            });
        });
}

/**
* contains login logic.
*/
function login(req, res) {
    var userDetails = req.body;

    User.findOne({
            email: userDetails.email
        })
        .exec(function(err, user) {
            if (!user) {
                err = 'User not found';
            } else if (!user.validatePassword(userDetails.password)) {
                err = 'Invalid password';
            } else {
                createUserSession(req, res, user);
            }

            if (err) {
                res.status(500).json(err);
            }
        });
}

function logout(req, res) {
    req.session.destroy(function(err) {
        if (err) {
            return next(err);
        }
        res.status(200).send();
    });
}

/**
* Contains logic for OneTouch authentication error.
*/
function createOneTouchRequest(req, res) {
    User.findOne({
            email: req.session.username
        })
        .exec(function(err, user) {
            if (err) {
                res.status(500).json(err);
                return;
            }
            authy.createApprovalRequest({
                authyId: user.authy_id,
                details: {
                    visible: {
                        "Email": user.email
                    }
                },
                message: 'Angular Simple Demo Login Request'
            }, {
                ttl: 60
            }, function(authyErr, authyRes) {
                if (authyErr) {
                    res.status(500).json(authyErr);
                    return;
                }
                // After executing the authentication uuid is neing saved in the session.
                req.session.uuid = authyRes.approval_request.uuid;
                res.status(200).json(authyRes)
            });
        });
}


/**
/* verifies whether token given on the view matches with token issues by Authy
*/
function verifyToken(req, res) {
    User.findOne({
            email: req.session.username
        })
        .exec(function(err, user) {
            if (err) {
                res.status(500).json(err);
                return;
            }
            if(user) {
              authy.verifyToken({
                  authyId: user.authy_id,
                  token: req.body.token
              }, function(err, tokenRes) {
                  if (err) {
                      res.status(500).json(err);
                      return;
                  }
                  if (tokenRes.success) {
                      req.session.authy = true;
                  }
                  res.status(200).json(tokenRes);
              });
            } else {
              res.status(500).json('User does not exist.');
            }
        });
};

/**
* Creates new express session upon successful registration or login. This will contain User data until user logs out.
*/
function createUserSession(req, res, user) {
    req.session.regenerate(function() {
        req.session.loggedIn = true;
        req.session.username = user.email;
        req.session.authy = false;
        res.status(200).json();
    });
}

module.exports = controller;
